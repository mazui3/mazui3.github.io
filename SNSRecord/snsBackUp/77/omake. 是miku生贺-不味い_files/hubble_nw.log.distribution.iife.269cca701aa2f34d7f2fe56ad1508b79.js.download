var NWLogDistribution = (function (exports) {
'use strict';

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

/* eslint-disable */

/**
 * Enum env values.
 * @readonly
 * @enum {string}
 */
var ENV = {
  ST: 'ST',
  HB: 'HB'
};
/**
 * 封装哈勃打点
 * @class HubLog
 * @constructs HubLog
 * @param  {Object} props
 * @param  {string} props.userId 用户id
 * @param  {string} props.key hubble产品id
 * @param  {string} props.k ST平台产品key
 * @param  {object} props.pointConfig 是否需要上报hubble配置数据，从打点验证平台上下载
 * @param  {string} props.env 数据上报平台
 */

var HubLog = function () {
  function HubLog(props) {
    classCallCheck(this, HubLog);

    this._userId = props.userId;
    this._key = props.key;
    this._env = props.env;
    this._k = props.k;
    this._pointConfig = props.pointConfig || {};
    this.reloadNum = 0;

    this._initHB();
  }

  createClass(HubLog, [{
    key: '_initHB',
    value: function _initHB() {
      var _this = this;

      var script = document.createElement('script');
      script.setAttribute('src', 'https://easyreadfs.nosdn.127.net/hubble/DATracker.sync._yuedu1.6.12.4.219ca61c8a3e9bfe036bdee938b2e6f5.js');
      script.setAttribute('type', 'text/javascript');
      script.setAttribute('id', 'hbEl');
      document.head.appendChild(script);
      this.promise = new Promise(function (resolve, reject) {
        script.onload = function () {
          DATracker.init(_this._key, {
            truncateLength: 255,
            persistence: "localStorage",
            cross_subdomain_cookie: true
          });

          if (_this._userId) {
            DATracker.login(_this._userId);
          }

          resolve();
        };

        script.onerror = function () {
          reject('哈勃平台加载失败！');
        };
      });
    }
  }, {
    key: '_reloadHB',
    value: function _reloadHB() {
      var oldEl = document.getElementById('hbEl');

      if (oldEl) {
        oldEl.parentNode.removeChild(oldEl);
      }

      this._initHB();
    }
    /**
     * 打点到哈勃
     *eg: logToHub('event-Idxxxx', {
     *     attr1: 'attr1value',
     *     attr2: "Laptop Computer",
     *     attr3: "MacBook Pro",
     *     attr4: 123.45
     *});
     * @param eventId string
     * @param attributes object
     */

  }, {
    key: 'logToHub',
    value: function logToHub(eventId, attributes) {
      var _this2 = this;

      this.promise.then(function () {
        if (_this2._pointConfig['' + eventId]) {
          if (_this2._pointConfig['' + eventId].reqHb) {
            DATracker.track(eventId, attributes);
          } else {
            DATracker.trackYueduStatistic(eventId, attributes);
          }
        } else {
          DATracker.track(eventId, attributes);
        }
      }).catch(function (err) {
        if (_this2.reloadNum < 3) {
          _this2.reloadNum += 1;

          _this2._reloadHB();

          _this2.trackByHub(eventId, attributes);
        } else {
          console.log('哈勃平台加载失败!');
          _this2.reloadNum = 0;
        }
      });
    }
  }, {
    key: 'trackByHub',
    value: function trackByHub(eventId, attributes) {
      this.logToHub(eventId, attributes);
    }
    /**
     * 打点到打点验证平台
     *eg:logToSt('event-Idxxxx', {
     *     attr1: 'attr1  value',
     *     attr2: "Laptop Computer",
     *     attr3: "MacBook Pro",
     *     attr4: 123.45
     * });
     * @param eventId string 打点事件id
     * @param attributes object 上报属性对象
     */

  }, {
    key: 'logToSt',
    value: function logToSt(eventId, attributes) {
      var data = Object.assign(attributes, {
        eId: eventId,
        k: this._k
      });

      try {
        var req = new XMLHttpRequest();
        req.open('post', 'https://st.mh.163.com/pc.gif', true);
        req.withCredentials = false;
        req.setRequestHeader("Content-Type", "application/json;charset=UTF-8");

        req.onreadystatechange = function () {
          if (req.readyState === 4) {
            if (req.status === 200) {
              console.log('打点st上报成功');
            } else {
              console.log('打点st服务器错误');
            }
          }
        };

        req.send(JSON.stringify(data));
      } catch (e) {
        console.error(e);
        console.log('打点st服务器错误');
      }

      return;
    }
    /**
     * 标识真实用户，建议用户登录完成时调用
     * @param userId
     */

  }, {
    key: 'login',
    value: function login(userId) {
      this.promise.then(function () {
        DATracker.login(userId);
      });
    }
    /***
     * 切到匿名用户
     */

  }, {
    key: 'logout',
    value: function logout() {
      this.promise.then(function () {
        DATracker.logout();
      });
    }
    /**
     * 根据对象初始化配置env属性打点到不同平台
     *eg:capture('event-Idxxxx', {
     *     attr1: 'attr1  value',
     *     attr2: "Laptop Computer",
     *     attr3: "MacBook Pro",
     *     attr4: 123.45
     * });
     * @param eventId string 打点事件id
     * @param attributes object 上报属性对象
     */

  }, {
    key: 'capture',
    value: function capture(eventId, attributes) {
      if (this._env === ENV.ST) {
        this.logToSt(eventId, attributes);
      } else if (this._env === ENV.HB) {
        this.logToHub(eventId, attributes);
      } else {
        this.logToHub(eventId, attributes);
      }
    }
  }]);
  return HubLog;
}();

exports.ENV = ENV;
exports.HubLog = HubLog;

return exports;

}({}));
